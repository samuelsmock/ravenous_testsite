{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleSortByChange","bind","handleTermChange","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.609d5f39.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n                     <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                    <p>{this.props.business.address}</p>\r\n                    <p>{this.props.business.city}</p>\r\n                    <p>{this.props.business.state + this.props.business.zipCode}</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                    <h3>{this.props.business.category}</h3>\r\n                    <h3 className=\"rating\">{this.props.business.rating + 'stars'}</h3>\r\n                    <p>{this.props.business.reviewCount + 'reviews'}</p>\r\n              </div>\r\n            </div>\r\n            </div>\r\n            )\r\n        };\r\n}\r\n\r\nexport default Business;\r\n","import React from 'react';\r\nimport './BusinessList.css';\r\n\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {\r\n          this.props.businesses.map(business => {\r\n            return <Business business={business} key={business.id} />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {term: '', \r\n                    location: '',\r\n                    sortBy: 'best_match'\r\n      }\r\n     \r\n      this.handleSortByChange = this.handleSortByChange.bind(this);\r\n      this.handleTermChange = this.handleTermChange.bind(this);\r\n      this.handleLocationChange =  this.handleLocationChange.bind(this);  \r\n      this.handleSearch = this.handleSearch.bind(this);         \r\n    \r\n    this.sortByOptions = {\r\n        'Best Match': 'best_match',\r\n        \"Highest Rated\": 'rating',\r\n        \"Most Reviewed\": 'review_count'\r\n      };\r\n    }\r\n\r\n    getSortByClass(sortByOption){\r\n      if(this.state.sortBy === sortByOption){\r\n        return 'active';\r\n      }else{\r\n        return '';\r\n      }\r\n    }\r\n\r\n    handleSortByChange(sortByOption){\r\n      this.setState({sortBy: sortByOption});\r\n    }\r\n\r\n    handleTermChange(event){\r\n      this.setState({term: event.target.value})\r\n    }\r\n\r\n    handleLocationChange(event){\r\n      this.setState({location: event.target.value})\r\n    }\r\n\r\n    handleSearch(event){\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n        \r\n    }\r\n\r\n    renderSortByOptions() {\r\n      return Object.keys(this.sortByOptions).map(sortByOption => {\r\n        let sortByOptionValue = this.sortByOptions[sortByOption];\r\n        return (<li className={this.getSortByClass(sortByOptionValue)}\r\n                    key={sortByOptionValue}\r\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n                  {sortByOption}\r\n               </li>);\r\n      });\r\n    }\r\n  \r\n    render (){\r\n        return (\r\n        <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>\r\n            {this.renderSortByOptions()}\r\n          </ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input onChange = {this.handleTermChange} placeholder=\"Search Businesses\" />\r\n          <input onChange = {this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick = {this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>);\r\n    };\r\n\r\n}\r\n\r\nexport default SearchBar;","const apiKey = 'APornQ1Uz2T_6ayzYXbSrdxeoFJcgiVrd4AQgWj3hc449H0yZkN1yymIAQ_EufdHAFBYSQi2JL_VB0PqtfY46RUkAqG4ybLFnWFDbH_1Eip8gpyZku4LChyH1EBEX3Yx'\r\n\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n      return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${apiKey}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (jsonResponse.businesses) {\r\n          return jsonResponse.businesses.map(business => ({\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count\r\n          }));\r\n        }\r\n      });\r\n    }\r\n  };\r\n  \r\nexport default Yelp;","import React from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}